---
apiVersion: batch/v1
kind: Job
metadata:
  name: vault-init
  namespace: vault
  annotations:
    argocd.argoproj.io/sync-wave: "1"  # Run this first
spec:
  template:
    spec:
      containers:
      - name: vault-init
        image: hashicorp/vault:1.19
        env:
        - name: VAULT_PREFIX
          value: "rancher-master"
        - name: VAULT_REPLICAS
          value: "1"
        command:
        - /bin/sh
        - -c
        - | 
          # Wait for Vault to start
          until nslookup ${VAULT_PREFIX}-vault-0.${VAULT_PREFIX}-vault-internal.vault.svc.cluster.local; do 
            echo "Waiting for Vault to start..."
            sleep 2
          done
          sleep 5
          
          # Configuration
          ROOT_FILE="/vault-keys/root-token.txt"
          UNSEAL_FILE="/vault-keys/unseal-key.txt"
          VAULT_PREFIX=${VAULT_PREFIX:-"rancher-master"}  # Default prefix
          MAX_WAIT_SECONDS=120
          DEBUG=true  # Set to true to enable debug output
          
          # Enable debug output if needed
          debug() {
            if [ "$DEBUG" = true ]; then
              echo "DEBUG: $1"
            fi
          }
          
          # Function to get the Vault address
          get_vault_addr() {
            echo "http://${VAULT_PREFIX}-vault-0.${VAULT_PREFIX}-vault-internal.vault.svc.cluster.local:8200"
          }
          
          # Test connectivity to Vault pod
          test_connectivity() {
            local vault_addr=$(get_vault_addr)
            
            debug "Testing connectivity to ${vault_addr}"
            VAULT_ADDR=$vault_addr vault status >/dev/null 2>&1
            local result=$?
          
            if [ $result -eq 0 ] || [ $result -eq 2 ]; then
              # Return code 0 = unsealed, 2 = sealed but reachable
              return 0  # Can connect
            else
              return 1  # Cannot connect
            fi
          }
          
          # Function to check if Vault pod is initialized
          is_initialized() {
            local vault_addr=$(get_vault_addr)
            
            debug "Checking if ${VAULT_PREFIX}-vault-0 is initialized using ${vault_addr}"
            
            if ! test_connectivity; then
              debug "Cannot connect to ${VAULT_PREFIX}-vault-0"
              return 2  # Cannot connect
            fi 
          
            STATUS_JSON=$(VAULT_ADDR=$vault_addr vault status -format=json 2>/dev/null || echo '{"initialized":false}')
            debug "Status JSON: ${STATUS_JSON}"
            
            INITIALIZED=$(echo "$STATUS_JSON" | grep -o '"initialized": *[a-z]*' | grep -o '[a-z]*$')            
            debug "Initialization status: ${INITIALIZED}"
            
            if [ "$INITIALIZED" = "true" ]; then
              return 0  # Initialized
            else
              return 1  # Not initialized
            fi
          }
          
          # Function to check if Vault pod is sealed
          is_sealed() {
            local vault_addr=$(get_vault_addr)
            
            debug "Checking if ${VAULT_PREFIX}-vault-0 is sealed using ${vault_addr}"
            
            STATUS_JSON=$(VAULT_ADDR=$vault_addr vault status -format=json 2>/dev/null || echo '{"sealed":true}')
            debug "Status JSON: ${STATUS_JSON}"
            
            SEALED=$(echo "$STATUS_JSON" | grep -o '"sealed": *[a-z]*' | awk '{print $2}')
            debug "Sealed status: ${SEALED}"
            
            if [ "$SEALED" = "true" ]; then
              return 0  # Sealed
            else
              return 1  # Unsealed
            fi
          }
          
          # Function to unseal Vault pod
          unseal_pod() {
            local unseal_key=$1
            local vault_addr=$(get_vault_addr)
            local max_unseal_attempts=3
            local attempt=1
            
            echo "Unsealing ${VAULT_PREFIX}-vault-0..."
            
            while [ $attempt -le $max_unseal_attempts ]; do
              debug "Unseal attempt $attempt/$max_unseal_attempts"
              debug "Using VAULT_ADDR=${vault_addr} and unseal key: ${unseal_key:0:3}..."
              
              UNSEAL_OUTPUT=$(VAULT_ADDR=$vault_addr vault operator unseal "$unseal_key" 2>&1)
              UNSEAL_STATUS=$?
              debug "Unseal command output: ${UNSEAL_OUTPUT}"
              debug "Unseal command status: ${UNSEAL_STATUS}"
              
              if [ $UNSEAL_STATUS -ne 0 ]; then
                echo "WARNING: Unseal command failed with status $UNSEAL_STATUS"
                echo "Error message: ${UNSEAL_OUTPUT}"
                sleep 5
                attempt=$((attempt + 1))
                continue
              fi
              
              # Wait a moment before checking seal status
              sleep 2
              
              # Verify the unseal was successful
              if is_sealed; then
                echo "WARNING: ${VAULT_PREFIX}-vault-0 is still sealed after unseal attempt $attempt."
                sleep 5
                attempt=$((attempt + 1))
              else
                echo "${VAULT_PREFIX}-vault-0 successfully unsealed."
                return 0
              fi
            done
            
            echo "ERROR: Failed to unseal ${VAULT_PREFIX}-vault-0 after $max_unseal_attempts attempts."
            return 1
          }
          
          # Function to initialize Vault
          initialize_vault() {
            echo "Initializing Vault on ${VAULT_PREFIX}-vault-0..."
            VAULT_ADDR=$(get_vault_addr)
            
            debug "Using VAULT_ADDR=${VAULT_ADDR} for initialization"
            
            INIT_OUTPUT=$(VAULT_ADDR=$VAULT_ADDR vault operator init -key-shares=1 -key-threshold=1 2>&1)
            INIT_STATUS=$?
            debug "Initialization output: ${INIT_OUTPUT}"
            debug "Initialization status: ${INIT_STATUS}"
            
            if [ $INIT_STATUS -ne 0 ]; then
              echo "ERROR: Failed to initialize Vault."
              echo "Error message: ${INIT_OUTPUT}"
              exit 1
            fi
            
            # Create keys directory if it doesn't exist
            mkdir -p /vault-keys
            
            echo "$INIT_OUTPUT" > /vault-keys/init-output.txt
            UNSEAL_KEY=$(echo "$INIT_OUTPUT" | grep "Unseal Key 1:" | awk '{print $NF}')
            ROOT_TOKEN=$(echo "$INIT_OUTPUT" | grep "Initial Root Token:" | awk '{print $NF}')
            
            debug "Extracted unseal key: ${UNSEAL_KEY:0:3}..."
            debug "Extracted root token: ${ROOT_TOKEN:0:3}..."
            
            # Verify we got the keys
            if [ -z "$UNSEAL_KEY" ] || [ -z "$ROOT_TOKEN" ]; then
              echo "ERROR: Failed to extract keys from initialization output."
              exit 1
            fi
            
            # Save keys to files
            echo "$UNSEAL_KEY" > "$UNSEAL_FILE"
            echo "$ROOT_TOKEN" > "$ROOT_FILE"
            
            # Set permissions to restrict access
            chmod 600 "$UNSEAL_FILE" "$ROOT_FILE" /vault-keys/init-output.txt
            
            echo "Vault initialization complete. Keys saved."
            return 0
          }
          
          # Main script logic
          echo "Starting Vault initialization and unseal process..."
          
          # Print environment details for debugging
          debug "Environment details:"
          debug "VAULT_PREFIX: ${VAULT_PREFIX}"
          debug "Pod address: $(get_vault_addr)"
          
          # Check if we have existing keys
          if [ -s "$UNSEAL_FILE" ] && grep -q '[^[:space:]]' "$UNSEAL_FILE" ]; then
            echo "Found existing unseal key."
            UNSEAL_KEY=$(cat "$UNSEAL_FILE")
            debug "Using existing unseal key: ${UNSEAL_KEY:0:3}..."
          else
            UNSEAL_KEY=""
            echo "No existing unseal key found."
          fi
          
          # Wait for the pod to be reachable
          max_attempts=20
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts: Checking connectivity to ${VAULT_PREFIX}-vault-0..."
            if test_connectivity; then
              echo "Successfully connected to ${VAULT_PREFIX}-vault-0"
              break
            fi
          
            if [ $attempt -eq $max_attempts ]; then
              echo "ERROR: Cannot reach ${VAULT_PREFIX}-vault-0 after $max_attempts attempts."
              exit 1
            fi
          
            echo "Cannot reach ${VAULT_PREFIX}-vault-0, waiting before retry..."
            sleep 5
            attempt=$((attempt + 1))
          done
          
          # Check if the pod is initialized
          init_status=$(is_initialized; echo $?)
          debug "Pod initialization status: $init_status"
          
          if [ "$init_status" = "0" ]; then
            echo "${VAULT_PREFIX}-vault-0 is already initialized."
            
            # If we don't have the key but the system is initialized, we can't proceed with unsealing
            if [ -z "$UNSEAL_KEY" ]; then
              echo "ERROR: Vault is initialized but no unseal key found. Cannot proceed with automatic unsealing."
              exit 1
            fi
          else
            echo "${VAULT_PREFIX}-vault-0 is not initialized."
            
            # Initialize Vault
            initialize_vault
            UNSEAL_KEY=$(cat "$UNSEAL_FILE")
          fi
          
          # Check if the pod is sealed and unseal if necessary
          if is_sealed; then
            echo "${VAULT_PREFIX}-vault-0 is sealed. Unsealing..."
            if ! unseal_pod "$UNSEAL_KEY"; then
              echo "ERROR: Failed to unseal ${VAULT_PREFIX}-vault-0."
              exit 1
            fi
          else
            echo "${VAULT_PREFIX}-vault-0 is already unsealed."
          fi
          
          echo "Vault initialization and unseal process completed successfully."
          exit 0
        volumeMounts:
        - name: vault-keys
          mountPath: /vault-keys
      volumes:
      - name: vault-keys
        persistentVolumeClaim:
          claimName: vault-keys
      restartPolicy: OnFailure
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-init
  namespace: vault
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: vault-init-role
  namespace: vault
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: vault-init-rolebinding
  namespace: vault
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: vault-init-role
subjects:
- kind: ServiceAccount
  name: vault-init
  namespace: vault
