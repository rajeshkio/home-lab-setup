# Source: cert-manager/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cert-manager
  namespace: cert-manager
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/version: "v1.17.1"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/component: "controller"
  template:
    metadata:
      labels:
        app: cert-manager
        app.kubernetes.io/name: cert-manager
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/component: "controller"
        app.kubernetes.io/version: "v1.17.1"
      annotations:
        prometheus.io/path: "/metrics"
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9402'
    spec:
      serviceAccountName: cert-manager
      enableServiceLinks: false
#      securityContext:
#        runAsNonRoot: true
#        seccompProfile:
#          type: RuntimeDefault
      initContainers:
      - name: generate-aws-creds
        image: alpine:latest
        command:
        - "/bin/sh"
        - "-c"
        - "/bin/sh /scripts/generate-aws-creds.sh"
        env:
        - name: AWS_REGION
          value: ap-south-1
        volumeMounts:
        - name: generate-aws-creds-script
          mountPath: /scripts
        - name: aws-roles-anywhere 
          mountPath: /etc/aws-roles-anywhere
        - name: shared-aws-credentials
          mountPath: /shared-aws-credentials
      containers:
      - name: cert-manager-controller
        image: "quay.io/jetstack/cert-manager-controller:v1.17.1"
        imagePullPolicy: IfNotPresent
        args:
        - --v=2
        - --cluster-resource-namespace=$(POD_NAMESPACE)
        - --leader-election-namespace=kube-system
        - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.17.1
        - --max-concurrent-challenges=60
        ports:
        - containerPort: 9402
          name: http-metrics
          protocol: TCP
        - containerPort: 9403
          name: http-healthz
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AWS_SHARED_CREDENTIALS_FILE
          value: /shared-aws-credentials/aws-credentials
        - name: AWS_DEFAULT_REGION
          value: ap-south-1
        - name: AWS_EC2_METADATA_DISABLED 
          value: "true"
        volumeMounts:
          - name: shared-aws-credentials
            mountPath: /shared-aws-credentials
            readOnly: true
        # LivenessProbe settings are based on those used for the Kubernetes
        # controller-manager. See:
        # https://github.com/kubernetes/kubernetes/blob/806b30170c61a38fedd54cc9ede4cd6275a1ad3b/cmd/kubeadm/app/util/staticpod/utils.go#L241-L245
        livenessProbe:
          httpGet:
            port: http-healthz
            path: /livez
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 15
          successThreshold: 1
          failureThreshold: 8
      - name: aws-credentials-refresher
        image: alpine
        command:
        - "/bin/sh"
        - "-c"
        - "/bin/sh /script-aws/start-aws-credentials-refresh.sh" 
        volumeMounts:
        - name: shared-aws-credentials
          mountPath: /shared-aws-credentials
          readOnly: false
        - name: generate-aws-creds-script
          mountPath: /scripts
        - name: aws-creds-refresh-script 
          mountPath: /script-aws
        - name: aws-roles-anywhere
          mountPath: /etc/aws-roles-anywhere
      - name: debug
        image: busybox
        command: ["sh", "-c", "sleep infinity"]
        volumeMounts:
        - name: shared-aws-credentials
          mountPath: /shared-aws-credentials
      volumes:
      - name: aws-roles-anywhere 
        secret:
          secretName: aws-roles-anywhere 
          defaultMode: 0400
      - name: shared-aws-credentials
        emptyDir: {}
      - name: generate-aws-creds-script
        secret:
          secretName: aws-roles-anywhere 
          items:
          - key: generate-aws-creds.sh
            path: generate-aws-creds.sh
          defaultMode: 0500
      - name: aws-creds-refresh-script
        secret:
          secretName: aws-roles-anywhere 
          items:
          - key: refresh-credentials.sh
            path: start-aws-credentials-refresh.sh
          defaultMode: 0500
